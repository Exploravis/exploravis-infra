---
- name: Install and start Teleport on master with GitHub auth
  hosts: master
  become: yes
  vars:
    teleport_version: "18.2.4"
    teleport_user: "exploravisuser"
    teleport_host: "teleport.exploravis.ddns.net"
    teleport_token: "devtoken"
    teleport_data_dir: "/var/lib/teleport"
    teleport_log: "/var/log/teleport.log"
    teleport_cfg: "/etc/teleport.yaml"  
    
    github_org: "Exploravis"
    github_team: "ea-team"
    github_client_id: "{{ lookup('env', 'EA_GITHUB_CLIENT_ID') }}"
    github_client_secret: "{{ lookup('env', 'EA_GITHUB_CLIENT_SECRET') }}"

  tasks:
    - name: Ensure Teleport data dir exists
      ansible.builtin.file:
        path: "{{ teleport_data_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Ensure /etc/teleport exists for config files
      ansible.builtin.file:
        path: /etc/teleport
        state: directory
        owner: root
        mode: '0755'

    - name: Install Teleport using official script
      ansible.builtin.shell: |
        curl https://cdn.teleport.dev/install.sh | bash -s {{ teleport_version }}
      args:
        creates: /usr/local/bin/teleport

    - name: Kill any stale Teleport process
      ansible.builtin.shell: |
        pkill -f "/usr/local/bin/teleport" || true
        sleep 2
      args:
        executable: /bin/bash
      changed_when: false
      ignore_errors: true

    - name: Deploy Teleport main configuration template
      ansible.builtin.template:
        src: templates/teleport.yaml.j2
        dest: "{{ teleport_cfg }}"
        mode: '0644'

    - name: Deploy GitHub connector configuration template
      ansible.builtin.template:
        src: templates/github-connector.yaml.j2
        dest: /etc/teleport/github.yaml
        mode: '0644'

    - name: Start and enable Teleport service
      ansible.builtin.systemd:
        name: teleport
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Wait for Teleport auth port
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 3025
        delay: 2
        timeout: 180

    - name: Wait for Teleport proxy port (HTTPS)
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 443
        delay: 5
        timeout: 90

    - name: Ensure local linux user exists
      ansible.builtin.user:
        name: "{{ teleport_user }}"
        shell: /bin/bash
        state: present

    - name: Deploy admin role template
      ansible.builtin.template:
        src: templates/admin-role.yaml.j2
        dest: /tmp/admin-role.yaml
        mode: '0644'

    - name: Wait for Teleport to be fully ready
      ansible.builtin.wait_for:
        path: "{{ teleport_data_dir }}/host_uuid"
        state: present
        timeout: 60

    - name: Apply admin role
      ansible.builtin.shell: |
        tctl create -f /tmp/admin-role.yaml --force
      args:
        executable: /bin/bash

    - name: Apply GitHub connector
      ansible.builtin.shell: |
        tctl create -f /etc/teleport/github.yaml --force
      args:
        executable: /bin/bash

    - name: Create Teleport admin user if not exists
      ansible.builtin.shell: |
        tctl get users {{ teleport_user }} >/dev/null 2>&1 || \
        tctl users add {{ teleport_user }} --roles=admin --logins=root,ubuntu,azureuser,{{ teleport_user }} > /tmp/tp_invite.txt
      args:
        executable: /bin/bash
      changed_when: false
      ignore_errors: true

    - name: Display invitation info
      ansible.builtin.shell: |
        if [ -f /tmp/tp_invite.txt ]; then
          cat /tmp/tp_invite.txt
        else
          echo "User {{ teleport_user }} already exists. To reset invitation run: tctl users reset {{ teleport_user }}"
        fi
      args:
        executable: /bin/bash
      register: invite_output

    # - name: Show invitation link
    #   debug:
    #     msg: "{{ invite_output.stdout }}"




    # - name: Display Teleport status
    #   debug:
    #     msg: "{{ teleport_status.stdout }}"
    #

